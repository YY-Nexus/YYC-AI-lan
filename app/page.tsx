"use client"

import type React from "react"
import { useEffect, useState, useRef } from "react"
import Link from "next/link"
import { Mic, Send, Download, Upload, X, Volume2, VolumeX, Square, Brain, Wand2, Shield, Gauge, Palette } from "lucide-react"
import { AnimatedTextBlock } from "@/components/typewriter-effect"

import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { useLocalModels } from "@/hooks/use-local-models"
import { useEducationAI } from "@/hooks/use-education-ai"
import { ModelSelector } from "@/components/model-selector"
import { GeometricAnimation } from "@/components/geometric-animation"
import GlobalAuditDashboard from "@/components/global-audit-dashboard"
import { VoiceSettingsDialog } from "@/components/voice-settings-dialog"
import type { LocalModel } from "@/lib/local-models"

type AppState = "splash" | "main"

interface SmartSuggestion {
  title: string
  description: string
  icon: string
  action: string
}

export default function Dashboard() {
  const [isMounted, setIsMounted] = useState(false)
  const [appState, setAppState] = useState<AppState>("splash")
  const [showSplashHint, setShowSplashHint] = useState(false)
  const [userInput, setUserInput] = useState("")
  const [chatMessages, setChatMessages] = useState<
    Array<{
      type: "user" | "ai" | "system"
      content: string
      timestamp: Date
      isAnimated?: boolean
    }>
  >([])

  const canvasRef = useRef<HTMLCanvasElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [chatMode, setChatMode] = useState<"deep" | "fast">("fast")
  const [selectedModel, setSelectedModel] = useState("gpt-4")
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([])
  const [smartSuggestions, setSmartSuggestions] = useState<SmartSuggestion[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)

  // ËØ≠Èü≥ÂäüËÉΩÁä∂ÊÄÅ
  const [isRecording, setIsRecording] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const [voiceEnabled, setVoiceEnabled] = useState(true)
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const [audioChunks, setAudioChunks] = useState<Blob[]>([])
  const [showVoiceSettings, setShowVoiceSettings] = useState(false)
  const [voice, setVoice] = useState<SpeechSynthesisVoice | null>(null)
  const [rate, setRate] = useState(1)
  const [pitch, setPitch] = useState(1)

  const { localModels, sendMessage: sendLocalMessage } = useLocalModels()
  const { subjects, askQuestion, analyzeLearningProgress } = useEducationAI()
  const [selectedModelType, setSelectedModelType] = useState<"cloud" | "local">("cloud")
  const [selectedLocalModel, setSelectedLocalModel] = useState<LocalModel | null>(null)

  // ÊïôËÇ≤AIÊô∫ËÉΩÊèêÁ§∫ÈÖçÁΩÆ
  const educationSuggestions = {
    subjects: [
      {
        title: "ËØ≠ÊñáÂ≠¶‰π†",
        description: "Âè§ËØóËØç„ÄÅ‰ΩúÊñá„ÄÅÈòÖËØªÁêÜËß£",
        icon: "üìö",
        action: "ÊàëÊÉ≥Â≠¶‰π†ËØ≠ÊñáÔºåËØ∑Â∏ÆÊàëÂà∂ÂÆöÂ≠¶‰π†ËÆ°Âàí",
      },
      {
        title: "Êï∞Â≠¶ËÆ≠ÁªÉ",
        description: "Âü∫Á°ÄÊï∞Â≠¶„ÄÅÈÄªËæëÊÄùÁª¥",
        icon: "üî¢",
        action: "ÊàëÈúÄË¶ÅÊï∞Â≠¶Â≠¶‰π†ÊåáÂØºÔºåËØ∑Â∏ÆÊàëÂàÜÊûêËñÑÂº±ÁéØËäÇ",
      },
      {
        title: "Â••Êï∞Á´ûËµõ",
        description: "Êï∞Â≠¶Á´ûËµõ‰∏ìÈ°πËÆ≠ÁªÉ",
        icon: "üèÜ",
        action: "ÊàëÊÉ≥ÂèÇÂä†Â••Êï∞Á´ûËµõÔºåËØ∑‰∏∫ÊàëÂà∂ÂÆöËÆ≠ÁªÉÊñπÊ°à",
      },
      {
        title: "Ëã±ËØ≠ÊèêÂçá",
        description: "Âê¨ËØ¥ËØªÂÜôÂÖ®Èù¢ÂèëÂ±ï",
        icon: "üåç",
        action: "ÊàëÊÉ≥ÊèêÈ´òËã±ËØ≠Ê∞¥Âπ≥ÔºåËØ∑Â∏ÆÊàëËßÑÂàíÂ≠¶‰π†Ë∑ØÂæÑ",
      },
      { title: "ÁßëÂ≠¶Êé¢Á¥¢", description: "Áâ©ÁêÜÂåñÂ≠¶ÁîüÁâ©ÁªºÂêà", icon: "üî¨", action: "ÊàëÂØπÁßëÂ≠¶ÂæàÊÑüÂÖ¥Ë∂£ÔºåËØ∑Êé®ËçêÂ≠¶‰π†ÂÜÖÂÆπ" },
      { title: "Ëâ∫ÊúØÂàõ‰Ωú", description: "ÁªòÁîªÈü≥‰πêÂàõÊÑèÂüπÂÖª", icon: "üé®", action: "ÊàëÊÉ≥ÂüπÂÖªËâ∫ÊúØÂàõ‰ΩúËÉΩÂäõÔºåËØ∑ÁªôÊàëÂª∫ËÆÆ" },
    ],
  }

  // Ëá™Âä®ÊªöÂä®Âà∞ÊúÄÊñ∞Ê∂àÊÅØ
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [chatMessages])

  // Êô∫ËÉΩÊèêÁ§∫ÈÄªËæë
  useEffect(() => {
    if (!userInput.trim()) {
      setShowSuggestions(false)
      return
    }

    const lowerInput = userInput.toLowerCase()
    let suggestions: SmartSuggestion[] = []

    // Ê£ÄÊü•ÊïôËÇ≤Áõ∏ÂÖ≥ÂÖ≥ÈîÆËØç
    const educationKeywords = ["Â≠¶‰π†", "Êï∞Â≠¶", "ËØ≠Êñá", "Ëã±ËØ≠", "ÁßëÂ≠¶", "Â••Êï∞", "Á´ûËµõ", "‰Ωú‰∏ö", "ËÄÉËØï", "ÊèêÈ´ò", "ËæÖÂØº"]
    if (educationKeywords.some((keyword) => lowerInput.includes(keyword))) {
      suggestions = [...suggestions, ...educationSuggestions.subjects.slice(0, 3)]
    }

    setSmartSuggestions(suggestions)
    setShowSuggestions(suggestions.length > 0)
  }, [userInput])

  // ËØ≠Èü≥ËØÜÂà´ÂäüËÉΩ
  const startVoiceRecording = async () => {
    if (!isMounted || typeof window === 'undefined' || !navigator.mediaDevices) return
    
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const recorder = new MediaRecorder(stream)

      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          setAudioChunks((prev) => [...prev, event.data])
        }
      }

      recorder.onstop = () => {
        setTimeout(() => {
          setUserInput("ËØ≠Èü≥ËæìÂÖ•ÔºöËÄÅÂ∏àÔºåÊàëÊÉ≥Â≠¶‰π†Â••Êï∞Á´ûËµõ")
        }, 1000)
        stream.getTracks().forEach((track) => track.stop())
      }

      recorder.start()
      setMediaRecorder(recorder)
      setIsRecording(true)
    } catch (error) {
      console.error("Êó†Ê≥ïËÆøÈóÆÈ∫¶ÂÖãÈ£é:", error)
    }
  }

  const stopVoiceRecording = () => {
    if (mediaRecorder && mediaRecorder.state === "recording") {
      mediaRecorder.stop()
      setIsRecording(false)
      setMediaRecorder(null)
    }
  }

  // ËØ≠Èü≥Êí≠ÊîæÂäüËÉΩ
  const speakText = (text: string) => {
    if (!voiceEnabled || !isMounted || typeof window === 'undefined' || !speechSynthesis) return

    speechSynthesis.cancel()
    const utterance = new SpeechSynthesisUtterance(text)
    utterance.lang = "zh-CN"
    if (voice) {
      utterance.voice = voice;
    }
    utterance.rate = rate;
    utterance.pitch = pitch;

    utterance.onstart = () => setIsPlaying(true)
    utterance.onend = () => setIsPlaying(false)
    utterance.onerror = () => setIsPlaying(false)

    speechSynthesis.speak(utterance)
  }

  const stopSpeaking = () => {
    if (!isMounted || typeof window === 'undefined' || !speechSynthesis) return
    
    speechSynthesis.cancel()
    setIsPlaying(false)
  }

  // ÂÆ¢Êà∑Á´ØÊåÇËΩΩÊ£ÄÊü•
  useEffect(() => {
    setIsMounted(true)
  }, [])

  // ÂêØÂä®È°µÈù¢ÈÄªËæë
  useEffect(() => {
    if (isMounted && appState === "splash") {
      const timer = setTimeout(() => {
        setShowSplashHint(true)
      }, 3000)

      const handleKeyPress = (e: KeyboardEvent) => {
        const splashElement = document.querySelector(".splash-container")
        if (splashElement) {
          splashElement.classList.add("animate-fade-out")
          setTimeout(() => {
            setAppState("main")
          }, 800)
        } else {
          setAppState("main")
        }
      }

      const handleClick = () => {
        const splashElement = document.querySelector(".splash-container")
        if (splashElement) {
          splashElement.classList.add("animate-scale-out")
          setTimeout(() => {
            setAppState("main");
            setChatMessages([
              {
                type: "ai",
                content: "üëã Ê¨¢Ëøé‰ΩøÁî® YYC¬≥ AI Êô∫ËÉΩÊïôËÇ≤‰∏≠ÂøÉÔºÅÊàëÊòØÊÇ®ÁöÑ‰∏ìÂ±ûAIÊïôËÇ≤ÂØºÂ∏àÔºåÂ∑≤‰∏∫ÊÇ®ÈìæÊé•ÂÖ®ÂüüÂäüËÉΩÔºåËØ∑ÈóÆÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©ÊÇ®Ôºü",
                timestamp: new Date(),
                isAnimated: true,
              },
            ]);
          }, 600);
        } else {
          setAppState("main")
        }
      }

      document.addEventListener("keydown", handleKeyPress)
      document.addEventListener("click", handleClick)

      return () => {
        clearTimeout(timer)
        document.removeEventListener("keydown", handleKeyPress)
        document.removeEventListener("click", handleClick)
      }
    }
  }, [appState, isMounted])

  // Â§ÑÁêÜÁî®Êà∑ËæìÂÖ•
  const handleSendMessage = () => {
    if (!userInput.trim() || !isMounted) return

    const newUserMessage = {
      type: "user" as const,
      content: userInput,
      timestamp: new Date(),
    }

    setChatMessages((prev) => [...prev, newUserMessage])
    setShowSuggestions(false)

    // AIÂìçÂ∫îÈÄªËæë
    setTimeout(() => {
      generateAIResponse(userInput).then((aiResponse) => {
        const response = typeof aiResponse === "string" ? { content: aiResponse, isAnimated: true } : aiResponse

        setChatMessages((prev) => [
          ...prev,
          {
            type: "ai",
            content: response.content,
            timestamp: new Date(),
            isAnimated: response.isAnimated || false,
          },
        ])

        if (voiceEnabled) {
          setTimeout(
            () => {
              speakText(response.content)
            },
            response.content.length * 30 + 1000,
          )
        }
      })
    }, 1000)

    setUserInput("")
  }

  // Â§ÑÁêÜÊô∫ËÉΩÊèêÁ§∫ÁÇπÂáª
  const handleSuggestionClick = (suggestion: SmartSuggestion) => {
    setUserInput(suggestion.action)
    setShowSuggestions(false)
    inputRef.current?.focus()
  }

  // Êñá‰ª∂‰∏ä‰º†Â§ÑÁêÜ
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || [])
    setUploadedFiles((prev) => [...prev, ...files])
  }

  // Êñá‰ª∂‰∏ãËΩΩÂ§ÑÁêÜ
  const handleDownload = () => {
    if (!isMounted) return
    
    const chatContent = chatMessages
      .map((msg) => `[${msg.timestamp.toLocaleString()}] ${msg.type.toUpperCase()}: ${msg.content}`)
      .join("\n\n")

    const blob = new Blob([chatContent], { type: "text/plain;charset=utf-8" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = `Mr_Zhou_AI_Chat_${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  // Â¢ûÂº∫ÁöÑAIÂìçÂ∫îÁîüÊàê
  const generateAIResponse = async (input: string): Promise<{ content: string; isAnimated: boolean }> => {
    if (selectedModelType === "local" && selectedLocalModel) {
      try {
        const messages = [
          {
            role: "system",
            content:
              "‰Ω†ÊòØYYC3 AIÊô∫ËÉΩÊïôËÇ≤‰∏≠ÂøÉÁöÑ‰∏ì‰∏öAIÂØºÂ∏àÔºå‰∏ìÊ≥®‰∫é‰∏≠ÂõΩÊïôËÇ≤2023-2025Âπ¥Â∞èÂ≠¶„ÄÅÂàù‰∏≠Â§öÂ≠¶ÁßëÊïôÂ≠¶„ÄÇËØ∑Áî®‰∏≠ÊñáÂõûÂ§ç„ÄÇ",
          },
          { role: "user", content: input },
        ]
        const response = await sendLocalMessage(selectedLocalModel, messages)
        return { content: response, isAnimated: true };
      } catch (error) {
        const errorMessage = `‚ùå Êú¨Âú∞Ê®°ÂûãË∞ÉÁî®Â§±Ë¥•: ${error instanceof Error ? error.message : "Êú™Áü•ÈîôËØØ"}\n\nËØ∑Ê£ÄÊü•Ê®°ÂûãÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°åÔºåÊàñÂàáÊç¢Âà∞‰∫ëÁ´ØÊ®°Âûã„ÄÇ`;
        return { content: errorMessage, isAnimated: false };
      }
    }

    const lowerInput = input.toLowerCase()

    // Ê†∏ÂøÉÂäüËÉΩ‰ªãÁªç
    if (lowerInput.includes("ÂèØËßÜÂåñ") || lowerInput.includes("ÁºñÁ®ã")) {
      return {
        content: `üß† **ÂèØËßÜÂåñÁºñÁ®ãÂπ≥Âè∞**

Êàë‰ª¨ÁöÑÂèØËßÜÂåñÁºñÁ®ãÂπ≥Âè∞ÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑÊó†‰ª£Á†Å/‰Ωé‰ª£Á†ÅÂ∑•ÂÖ∑Ôºå‰∏ì‰∏∫ÊïôËÇ≤Âú∫ÊôØËÆæËÆ°„ÄÇÊÇ®ÂèØ‰ª•Ôºö

- **ÊãñÊãΩÁîüÊàêÂ∫îÁî®**ÔºöÂÉèÊê≠ÁßØÊú®‰∏ÄÊ†∑ÔºåÈÄöËøáÊãñÊãΩÈ¢ÑËÆæÁöÑUIÁªÑ‰ª∂ÂíåÈÄªËæëÊ®°ÂùóÔºåÂø´ÈÄüÊûÑÂª∫‰∫§‰∫íÂºèÂ∫îÁî®ÂíåÊïôÂ≠¶ËØæ‰ª∂„ÄÇ
- **ÂÆûÊó∂‰ª£Á†ÅÈ¢ÑËßà**ÔºöÂú®ÂèØËßÜÂåñÊê≠Âª∫ÁöÑÂêåÊó∂ÔºåÁ≥ªÁªü‰ºöÂÆûÊó∂ÁîüÊàêÂØπÂ∫îÁöÑReact„ÄÅVue‰ª£Á†ÅÔºå‰æø‰∫éÂ≠¶‰π†ÂíåÁêÜËß£„ÄÇ
- **‰∏ÄÈîÆÂØºÂá∫**ÔºöÂèØ‰ª•Â∞ÜÊÇ®ÁöÑ‰ΩúÂìÅÂØºÂá∫‰∏∫Áã¨Á´ãÁöÑÂâçÁ´ØÈ°πÁõÆ‰ª£Á†Å„ÄÇ

ÁÇπÂáªÂ∑¶‰∏ãËßíÁöÑ **Â§ßËÑëÂõæÊ†á** üß† Âç≥ÂèØËøõÂÖ•‰ΩìÈ™åÔºÅ`,
        isAnimated: true,
      };
    }

    if (lowerInput.includes("ÂÆ°Ê†∏") || lowerInput.includes("‰ª£Á†ÅË¥®Èáè") || lowerInput.includes("ÂÆâÂÖ®")) {
      return {
        content: `üõ°Ô∏è **ÂÖ®Â±ÄÊô∫ËÉΩÂÆ°Ê†∏Á≥ªÁªü**

Êú¨Â∫îÁî®ÈõÜÊàê‰∫ÜÂº∫Â§ßÁöÑÂÖ®Â±ÄÊô∫ËÉΩÂÆ°Ê†∏Á≥ªÁªüÔºåÂèØ‰ª•ÂØπÈ°πÁõÆËøõË°åÂÖ®Êñπ‰Ωç‰ΩìÊ£ÄÔºö

- **‰∫îÂ§ßÂÆ°Ê†∏Áª¥Â∫¶**ÔºöË¶ÜÁõñ‰ª£Á†ÅË¥®Èáè„ÄÅÊÄßËÉΩ„ÄÅÂÆâÂÖ®ÊÄß„ÄÅÂèØËÆøÈóÆÊÄßÂíå‰æùËµñÈ°π„ÄÇ
- **Êô∫ËÉΩËØÑÂàÜÂíåÊä•Âëä**Ôºö‰∏∫ÊØè‰∏™Áª¥Â∫¶ÊâìÂàÜÔºåÂπ∂ÁîüÊàêËØ¶ÁªÜÁöÑÂÆ°Ê†∏Êä•ÂëäÔºåÊåáÂá∫ÂÖ∑‰ΩìÈóÆÈ¢òÂíå‰ºòÂåñÂª∫ËÆÆ„ÄÇ
- **‰∏ÄÈîÆ‰øÆÂ§çÔºàÈÉ®ÂàÜÔºâ**ÔºöÂØπ‰∏Ä‰∫õÂ∏∏ËßÅÈóÆÈ¢òÔºåÁ≥ªÁªüÂèØ‰ª•Â∞ùËØïËá™Âä®‰øÆÂ§ç„ÄÇ

ÁÇπÂáªÂ∑¶‰∏ãËßíÁöÑ **ÁõæÁâåÂõæÊ†á** üõ°Ô∏è Âç≥ÂèØÂêØÂä®ÂÖ®Â±ÄÂÆ°Ê†∏„ÄÇ`,
        isAnimated: true,
      };
    }

    // ÊïôËÇ≤AIÊô∫ËÉΩ‰ΩìÂìçÂ∫î
    if (
      ["Â≠¶‰π†", "Êï∞Â≠¶", "ËØ≠Êñá", "Ëã±ËØ≠", "ÁßëÂ≠¶", "Â••Êï∞", "Á´ûËµõ", "‰Ωú‰∏ö", "ËÄÉËØï", "ÊèêÈ´ò", "ËæÖÂØº"].some((keyword) =>
        lowerInput.includes(keyword),
      )
    ) {
      // Â••Êï∞Á´ûËµõ‰∏ìÈ°π
      if (lowerInput.includes("Â••Êï∞") || lowerInput.includes("Á´ûËµõ")) {
        return {
          content: `üèÜ **YYC¬≥ AI - Â••Êï∞Á´ûËµõ‰∏ìÈ°πËÆ≠ÁªÉÁ≥ªÁªü**

üéØ **‰∏ì‰∏öÂ••Êï∞Á´ûËµõÂüπËÆ≠ÔºåÂä©ÂäõÊï∞Â≠¶Â§©ÊâçÊàêÈïø**

üìö **Ê†∏ÂøÉËÆ≠ÁªÉÊ®°ÂùóÔºö**
‚Ä¢ **Êï∞ËÆ∫‰∏ìÈ¢ò** - Ë¥®Êï∞„ÄÅÊúÄÂ§ßÂÖ¨Á∫¶Êï∞„ÄÅÂêå‰ΩôÁêÜËÆ∫„ÄÅ‰∏çÂÆöÊñπÁ®ã
‚Ä¢ **Âá†‰Ωï‰∏ìÈ¢ò** - Âπ≥Èù¢Âá†‰Ωï„ÄÅÁ´ã‰ΩìÂá†‰Ωï„ÄÅÂá†‰ΩïËØÅÊòé„ÄÅÂá†‰ΩïÂèòÊç¢  
‚Ä¢ **‰ª£Êï∞‰∏ìÈ¢ò** - ÊñπÁ®ã‰∏çÁ≠âÂºè„ÄÅÂáΩÊï∞ÂõæÂÉè„ÄÅÊï∞ÂàóÈÄíÊé®„ÄÅÂ§öÈ°πÂºè
‚Ä¢ **ÁªÑÂêàÊï∞Â≠¶** - ÊéíÂàóÁªÑÂêà„ÄÅÊ¶ÇÁéáÁªüËÆ°„ÄÅÂõæËÆ∫Âü∫Á°Ä„ÄÅÈÄíÊé®ÂÖ≥Á≥ª

üöÄ **Á´ãÂç≥ÂºÄÂßãÔºö**
ËØ∑ÂëäËØâÊàëÊÇ®ÁöÑÂπ¥Á∫ßÂíåÂΩìÂâçÊï∞Â≠¶Ê∞¥Âπ≥ÔºåÊàëÂ∞Ü‰∏∫ÊÇ®Âà∂ÂÆö‰∏ìÂ±ûÁöÑÂ••Êï∞Á´ûËµõËÆ≠ÁªÉËÆ°ÂàíÔºÅ

ÊÉ≥Ë¶ÅÂºÄÂßãÂì™‰∏™‰∏ìÈ¢òÁöÑÂ≠¶‰π†Âë¢Ôºü`,
          isAnimated: true,
        }
      }

      // ÈÄöÁî®ÊïôËÇ≤ÂìçÂ∫î
      return {
        content: `üéì **YYC¬≥ AI Êô∫ËÉΩÊïôËÇ≤‰∏≠ÂøÉ**

Ê¨¢ËøéÊù•Âà∞‰∏ì‰∏öÁöÑ‰∏≠ÂõΩÊïôËÇ≤2023-2025Âπ¥Â∞èÂ≠¶„ÄÅÂàù‰∏≠Â§öÂ≠¶ÁßëAIÊô∫ËÉΩ‰ΩìÁ≥ªÁªüÔºÅ

üìö **ÂÖ®Â≠¶ÁßëË¶ÜÁõñÔºö**
‚Ä¢ **ËØ≠Êñá** - Âè§ËØóËØçËµèÊûê„ÄÅ‰ΩúÊñáÊåáÂØº„ÄÅÈòÖËØªÁêÜËß£„ÄÅÊ±âÂ≠ó‰π¶ÂÜô
‚Ä¢ **Êï∞Â≠¶** - Âü∫Á°ÄËøêÁÆó„ÄÅÂá†‰ΩïÂõæÂΩ¢„ÄÅ‰ª£Êï∞ÊñπÁ®ã„ÄÅÊï∞Â≠¶Âª∫Ê®°
‚Ä¢ **Â••Êï∞Á´ûËµõ** - Êï∞ËÆ∫„ÄÅÂá†‰Ωï„ÄÅ‰ª£Êï∞„ÄÅÁªÑÂêàÊï∞Â≠¶‰∏ìÈ°πËÆ≠ÁªÉ üèÜ
‚Ä¢ **Ëã±ËØ≠** - ËØçÊ±áÁßØÁ¥Ø„ÄÅËØ≠Ê≥ïÂ≠¶‰π†„ÄÅÂê¨ËØ¥ËÆ≠ÁªÉ„ÄÅÊñáÂåñÁêÜËß£
‚Ä¢ **ÁßëÂ≠¶** - Áâ©ÁêÜÂåñÂ≠¶ÁîüÁâ©„ÄÅÁßëÂ≠¶ÂÆûÈ™å„ÄÅÂàõÊñ∞ÊÄùÁª¥
‚Ä¢ **Ëâ∫ÊúØ** - ÁªòÁîªÊäÄÂ∑ß„ÄÅÈü≥‰πêÊ¨£Ëµè„ÄÅÂàõÊÑèËÆæËÆ°„ÄÅÁæéËÇ≤ÁÜèÈô∂

üéØ **ËØ∑ÂëäËØâÊàëÔºö**
‚Ä¢ ÊÇ®ÁöÑÂπ¥Á∫ßÂíåÂ≠¶‰π†ÈúÄÊ±Ç
‚Ä¢ ÊÉ≥Ë¶ÅÈáçÁÇπÊèêÂçáÁöÑÂ≠¶Áßë
‚Ä¢ ÂΩìÂâçÁöÑÂ≠¶‰π†Âõ∞ÈöæÊàñÁõÆÊ†á

ÊàëÂ∞Ü‰∏∫ÊÇ®Êèê‰æõÊúÄ‰∏ì‰∏öÁöÑ‰∏™ÊÄßÂåñÂ≠¶‰π†ÊåáÂØºÔºÅ`,
        isAnimated: true,
      }
    }

    // ÈªòËÆ§ÂìçÂ∫î
    return {
      content: `üëã **Ê¨¢Ëøé‰ΩøÁî® YYC¬≥ AI Êô∫ËÉΩÊïôËÇ≤‰∏≠ÂøÉ**

ÊàëÊòØÊÇ®ÁöÑ‰∏ìÂ±ûAIÊïôËÇ≤ÂØºÂ∏àÔºå‰∏ìÊ≥®‰∫é‰∏∫‰∏≠ÂõΩÂ∞èÂ≠¶„ÄÅÂàù‰∏≠Â≠¶ÁîüÊèê‰æõÂÖ®Â≠¶ÁßëÊô∫ËÉΩÂåñÂ≠¶‰π†ÊîØÊåÅ„ÄÇ

üéØ **ÊàëÂèØ‰ª•Â∏ÆÂä©ÊÇ®Ôºö**
‚Ä¢ Âà∂ÂÆö‰∏™ÊÄßÂåñÂ≠¶‰π†ËÆ°Âàí
‚Ä¢ Ëß£Á≠îÂêÑÂ≠¶ÁßëÁñëÈöæÈóÆÈ¢ò
‚Ä¢ Êèê‰æõÂ••Êï∞Á´ûËµõ‰∏ìÈ°πËÆ≠ÁªÉ
‚Ä¢ ÂàÜÊûêÂ≠¶‰π†ËøõÂ∫¶ÂíåÊïàÊûú
‚Ä¢ Êé®ËçêÈÄÇÂêàÁöÑÂ≠¶‰π†ËµÑÊ∫ê

üí° **ÊÇ®‰πüÂèØ‰ª•ËØïËØïÈóÆÊàëÔºö**
‚Ä¢ "Â¶Ç‰Ωï‰ΩøÁî®ÂèØËßÜÂåñÁºñÁ®ãÔºü"
‚Ä¢ "Â∏ÆÊàëÂÆ°Ê†∏‰∏Ä‰∏ãÈ°πÁõÆ‰ª£Á†Å„ÄÇ"

ËØ∑ÂëäËØâÊàëÊÇ®ÊÉ≥Ë¶ÅÂ≠¶‰π†‰ªÄ‰πàÔºåÊàñËÄÖÊúâ‰ªÄ‰πàÈóÆÈ¢òÈúÄË¶ÅËß£Á≠îÔºü`,
      isAnimated: true,
    }
  }

  // ÂêØÂä®È°µÈù¢Ê∏≤Êüì
  if (appState === "splash") {
    return (
      <div className="splash-container min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-950 text-white relative overflow-hidden flex items-center justify-center">
        <GeometricAnimation color="#06b6d4" speed={0.8} />

        <div className="relative z-10 text-center transform transition-all duration-1000">
          {/* LOGOÂå∫Âüü */}
          <div className="mb-12 transform hover:scale-105 transition-transform duration-300">
            <div className="relative inline-block">
              <img
                src="/images/yanyucloudcube-logo.webp"
                alt="YanYu Cloud Cube AI Logo"
                className="h-40 w-40 mx-auto mb-8 drop-shadow-2xl transition duration-700 slow-pulse"
                style={{ filter: 'drop-shadow(0 0 24px #60a5fa) brightness(1.08)' }}
              />
            </div>
          </div>

          {/* ÂìÅÁâåÂêçÁß∞Âå∫Âüü */}
          <div className="mb-16 space-y-6">
            <h1 className="text-6xl font-bold mb-8 bg-gradient-to-r from-white via-blue-200 to-blue-400 bg-clip-text text-transparent animate-fade-in-up tracking-wider">
              YanYu Cloud Cube AI
            </h1>
            <h2 className="text-2xl font-light text-blue-200 tracking-widest animate-fade-in-up animation-delay-300">
              ‰∏áË±°ÂΩíÂÖÉ‰∫é‰∫ëÊû¢ ‰∏®Ê∑±Ê†àÊô∫ÂêØÊñ∞Á∫™ÂÖÉ
            </h2>
          </div>

          {/* ‰∫§‰∫íÊèêÁ§∫Âå∫Âüü */}
          {showSplashHint && (
            <div className="animate-fade-in-up space-y-6">
              <div className="text-cyan-300 text-2xl mb-6 animate-bounce-gentle">
                <div className="flex items-center justify-center space-x-3">
                  <div className="w-1 h-1 bg-cyan-400 rounded-full animate-ping"></div>
                  <span>ÁÇπÂáª‰ªªÊÑè‰ΩçÁΩÆÊàñÊåâ‰ªªÊÑèÈîÆÁªßÁª≠</span>
                  <div className="w-1 h-1 bg-cyan-400 rounded-full animate-ping animation-delay-300"></div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    )
  }

  // ‰∏ªÁïåÈù¢Ê∏≤Êüì
  if (!isMounted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-950 text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-500 mx-auto mb-4"></div>
          <p className="text-slate-300">Ê≠£Âú®ÂàùÂßãÂåñ...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-950 text-white relative overflow-hidden">
      <GeometricAnimation color="#06b6d4" speed={0.5} className="opacity-20" />

      {/* ‰∏ªÂÜÖÂÆπÂå∫Âüü */}
      <div className="relative z-10 min-h-screen flex flex-col">
        {/* È°∂ÈÉ®ÂìÅÁâåÊ†áËØÜ */}
        <div className="absolute top-4 left-4 flex items-center space-x-3">
          <Dialog>
            <DialogTrigger asChild>
              <button className="focus:outline-none">
                <img src="/images/yanyucloudcube-logo.webp" alt="ËÆæÁΩÆ" className="h-8 w-8 hover:scale-110 transition-transform" />
              </button>
            </DialogTrigger>
            <DialogContent className="max-w-lg">
              <DialogHeader>
                <DialogTitle className="flex items-center space-x-2">
                  <Gauge className="h-5 w-5 text-blue-500" />
                  <span>Á≥ªÁªüËÆæÁΩÆ</span>
                </DialogTitle>
              </DialogHeader>
              <div className="space-y-4 mt-2">
                <div>
                  <Label className="font-bold text-blue-600">Â§ßÊ®°ÂûãÈÄâÊã©</Label>
                  <ModelSelector value={selectedModel} onValueChange={setSelectedModel} onModelSelect={(model) => {
                    setSelectedModelType(model.type)
                    if (model.type === "local") {
                      const localModel = localModels.find((m) => m.id === model.id)
                      setSelectedLocalModel(localModel || null)
                    }
                  }} />
                </div>
                <div>
                  <Label className="font-bold text-blue-600">Á≥ªÁªüÊèêÁ§∫ËØçËÆæÂÆö</Label>
                  <input type="text" className="w-full border rounded px-2 py-1 mt-1 text-black" placeholder="ËØ∑ËæìÂÖ•Á≥ªÁªüÊèêÁ§∫ËØç..." />
                </div>
                <div>
                  <Label className="font-bold text-blue-600">ÁÉ≠Â∫¶ÔºàTemperatureÔºâ</Label>
                  <input type="range" min={0} max={1} step={0.01} className="w-full" />
                </div>
                <div>
                  <Label className="font-bold text-blue-600">APIÊãâÂèñ‰∏éÂ∞ÅË£Ö</Label>
                  <input type="text" className="w-full border rounded px-2 py-1 mt-1 text-black" placeholder="APIÂú∞ÂùÄÊàñÂØÜÈí•..." />
                  <Button className="mt-2">ÁªëÂÆöAPI</Button>
                </div>
                <div>
                  <Label className="font-bold text-blue-600">Êú¨Âú∞ËøêÁª¥Â∑•ÂÖ∑</Label>
                  <div className="text-xs text-gray-600">Ê®°ÂûãÁÆ°ÁêÜ„ÄÅAPIÊµãËØï„ÄÅÊó•ÂøóÊü•Áúã„ÄÅÂÅ•Â∫∑Ê£ÄÊü•Á≠â</div>
                </div>
              </div>
            </DialogContent>
          </Dialog>
          <span className="text-lg font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent">
            YanYu Cloud Cube AI
          </span>
        </div>

        {/* ‰∏≠Â§ÆÂØπËØùÂå∫Âüü */}
        <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full p-6 pt-16">
          {/* ËÅäÂ§©Ê∂àÊÅØÂå∫Âüü */}
          <div className="flex-1 mb-6 space-y-4 overflow-y-auto max-h-[70vh] scroll-smooth">
            {chatMessages.map((message, index) => (
              <div key={index} className={`flex items-start gap-3 ${message.type === "user" ? "justify-end" : ""}`}>
                {message.type === "ai" && (
                  <Avatar className="w-8 h-8 border-2 border-blue-400">
                    <AvatarFallback className="bg-blue-500 text-white">AI</AvatarFallback>
                  </Avatar>
                )}
                <div
                  className={`max-w-lg p-4 rounded-2xl shadow-md ${
                    message.type === "user"
                      ? "bg-blue-600/80 rounded-br-none"
                      : "bg-slate-800/60 rounded-bl-none"
                  }`}
                >
                  {message.isAnimated && message.type === "ai" ? (
                    <AnimatedTextBlock text={message.content} />
                  ) : (
                    <p className="whitespace-pre-wrap">{message.content}</p>
                  )}
                  <div className="text-xs text-slate-400 mt-2 text-right">
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
                {message.type === "user" && (
                  <Avatar className="w-8 h-8 border-2 border-slate-400">
                    <AvatarFallback>YY</AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* ËæìÂÖ•Âå∫Âüü */}
          <div className="relative">
            {showSuggestions && smartSuggestions.length > 0 && (
              <div className="absolute bottom-full left-0 right-0 p-2 space-y-2">
                {smartSuggestions.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSuggestionClick(suggestion)}
                    className="w-full text-left p-3 bg-slate-700/50 backdrop-blur-md rounded-lg hover:bg-slate-600/70 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-xl">{suggestion.icon}</span>
                      <div>
                        <p className="font-semibold">{suggestion.title}</p>
                        <p className="text-sm text-slate-300">{suggestion.description}</p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            )}

            <div className="bg-slate-800/30 backdrop-blur-sm border border-slate-700/30 rounded-2xl p-4 shadow-lg">
              <div className="flex items-center gap-4">
                <input
                  ref={inputRef}
                  type="text"
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
                  placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÂ≠¶‰π†ÈóÆÈ¢òÊàñÈúÄÊ±Ç..."
                  className="flex-1 bg-transparent focus:outline-none placeholder-slate-400"
                />
                <Dialog open={showVoiceSettings} onOpenChange={setShowVoiceSettings}>
                  <DialogTrigger asChild>
                    <button onClick={() => setShowVoiceSettings(true)} className="focus:outline-none">
                      {isRecording ? (
                        <Mic className="h-5 w-5 text-red-500 animate-pulse" />
                      ) : (
                        <Mic className="h-5 w-5 text-slate-400 hover:text-white" />
                      )}
                    </button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>ËØ≠Èü≥ËÆæÁΩÆ</DialogTitle>
                    </DialogHeader>
                    <VoiceSettingsDialog
                      open={showVoiceSettings}
                      onOpenChange={setShowVoiceSettings}
                      voice={voice}
                      setVoice={setVoice}
                      rate={rate}
                      setRate={setRate}
                      pitch={pitch}
                      setPitch={setPitch}
                    />
                  </DialogContent>
                </Dialog>
                <button onClick={() => setVoiceEnabled(!voiceEnabled)} className="focus:outline-none">
                  {voiceEnabled ? (
                    <Volume2 className="h-5 w-5 text-slate-400 hover:text-white" />
                  ) : (
                    <VolumeX className="h-5 w-5 text-slate-500" />
                  )}
                </button>
                <Button onClick={handleSendMessage} size="sm" className="rounded-full bg-blue-600 hover:bg-blue-500">
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex items-center justify-between mt-4">
                <div className="flex items-center gap-4">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button onClick={() => fileInputRef.current?.click()} className="focus:outline-none">
                          <Upload className="h-5 w-5 text-slate-400 hover:text-white" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent>‰∏ä‰º†Êñá‰ª∂</TooltipContent>
                    </Tooltip>
                    <input type="file" ref={fileInputRef} onChange={handleFileUpload} className="hidden" multiple />

                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button onClick={handleDownload} className="focus:outline-none">
                          <Download className="h-5 w-5 text-slate-400 hover:text-white" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent>‰∏ãËΩΩÂØπËØù</TooltipContent>
                    </Tooltip>

                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Link href="/visual-programming" passHref legacyBehavior>
                          <a target="_blank" rel="noopener noreferrer">
                            <Brain className="h-5 w-5 text-slate-400 hover:text-white" />
                          </a>
                        </Link>
                      </TooltipTrigger>
                      <TooltipContent>ÂèØËßÜÂåñÁºñÁ®ãÂπ≥Âè∞</TooltipContent>
                    </Tooltip>

                    <Dialog>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <DialogTrigger asChild>
                              <button className="focus:outline-none">
                                <Shield className="h-5 w-5 text-slate-400 hover:text-white" />
                              </button>
                            </DialogTrigger>
                          </TooltipTrigger>
                          <TooltipContent>ÂÖ®Â±ÄÊô∫ËÉΩÂÆ°Ê†∏</TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                      <DialogContent className="max-w-7xl h-[90vh]">
                        <DialogHeader>
                          <DialogTitle>ÂÖ®Â±ÄÊô∫ËÉΩÂÆ°Ê†∏</DialogTitle>
                        </DialogHeader>
                        <GlobalAuditDashboard />
                      </DialogContent>
                    </Dialog>
                  </TooltipProvider>
                </div>
                <div className="flex items-center gap-2">
                  <Label htmlFor="chat-mode" className="text-sm text-slate-400">Âø´ÈÄüÂõûÁ≠î</Label>
                  <Switch
                    id="chat-mode"
                    checked={chatMode === "deep"}
                    onCheckedChange={(checked) => setChatMode(checked ? "deep" : "fast")}
                  />
                  <Label htmlFor="chat-mode" className="text-sm text-slate-400">Ê∑±Â∫¶Ê®°Âºè</Label>
                </div>
                <div className="flex items-center gap-2">
                  <ModelSelector value={selectedModel} onValueChange={setSelectedModel} onModelSelect={(model) => {
                    setSelectedModelType(model.type)
                    if (model.type === "local") {
                      const localModel = localModels.find((m) => m.id === model.id)
                      setSelectedLocalModel(localModel || null)
                    }
                  }} />
                </div>
                <div className="text-xs text-slate-500">Êåâ Enter ÂèëÈÄÅÊ∂àÊÅØ</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
